workflows:
  sample-workflow:
    environment:
      flutter: stable
      xcode: latest
      cocoapods: 1.16.2

    scripts:
      # Force Codemagic to use Ruby 3.1+ to fix CocoaPods issues
      - name: Use System Ruby 3.1+
        script: |
          eval "$(rbenv init -)"
          rbenv global 3.1.0 || rbenv install 3.1.0
          ruby -v  # ✅ Verify Ruby version

      # Ensure iOS Deployment Target is set to 13.0 in Podfile
      - name: Set iOS Deployment Target to 13.0
        script: |
          if [ -f ios/Podfile ]; then
            sed -i '' "s/platform :ios, '[^']*'/platform :ios, '13.0'/" ios/Podfile
          else
            echo "platform :ios, '13.0'" > ios/Podfile
          fi
          cat ios/Podfile  # ✅ Print Podfile to confirm change
          echo "Updated Podfile to iOS 13.0"

      # Install CocoaPods
      - name: Install CocoaPods
        script: |
          gem install securerandom -v 0.3.2 || true  # ✅ Fix "securerandom" dependency error
          gem install cocoapods -v 1.16.2
          pod repo update

      # Install Flutter dependencies
      - name: Ensure Flutter dependencies are installed
        script: |
          flutter clean
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
          echo "Flutter dependencies installed"

      # Clean and Reinstall CocoaPods
      - name: Prepare iOS environment
        script: |
          cd ios
          rm -rf Pods Podfile.lock Runner.xcworkspace
          pod deintegrate
          pod install --repo-update
          cd ..
          echo "iOS environment prepared"

      # Ensure iOS Workspace is Generated
      - name: Generate iOS workspace
        script: |
          cd ios
          pod install --repo-update
          [ -f "Runner.xcworkspace" ] || echo "Missing xcworkspace!"
          [ -f Flutter/flutter_export_environment.sh ] || touch Flutter/flutter_export_environment.sh
          echo "Checked flutter_export_environment file"
          cd ..
          echo "iOS workspace setup completed"

      # Build iOS IPA
      - name: Build iOS
        script: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace -scheme Runner -sdk iphoneos -configuration Release \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Automatic \
            archive -archivePath $CM_BUILD_DIR/build/Runner.xcarchive | xcpretty
          if [ ! -d "$CM_BUILD_DIR/build/Runner.xcarchive" ]; then
            echo "Xcode archive failed: Archive not found!"
            exit 1
          fi
          xcodebuild -exportArchive -archivePath $CM_BUILD_DIR/build/Runner.xcarchive \
            -exportOptionsPlist ./exportOptions.plist -exportPath $CM_BUILD_DIR/build/ios/ipa | xcpretty
          cd ..
          echo "iOS IPA build completed"

      # Build Android APK
      - name: Build Android (APK)
        script: |
          flutter build apk
          echo "Android APK build completed"

      # Publish Artifacts
      - name: Publish Artifacts
        script: |
          mkdir -p build_outputs
          cp build/app/outputs/flutter-apk/app-release.apk build_outputs/
          [ -d build/ios/ipa ] && cp -r build/ios/ipa/*.ipa build_outputs/
          echo "Artifacts copied for publishing"

    artifacts:
      - build_outputs/app-release.apk
      - build_outputs/*.ipa
